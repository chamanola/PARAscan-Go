#!/bin/bash

set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
CYAN='\033[0;36m'
MAGENTA='\033[0;35m'
NC='\033[0m'

echo ""

echo -e "${YELLOW}         ===========================================${NC}"
echo -e "${CYAN}                      PARAscan-Go Installer${NC}"
echo -e "${YELLOW}         ===========================================${NC}"
echo ""

error_exit() {
    echo -e "${RED}[✗] ERROR: $1${NC}" >&2
    exit 1
}

if ! command -v curl &> /dev/null; then
    error_exit "curl is required but not installed.\nInstall using:\n  ${YELLOW}Termux: pkg install curl\n  Linux: sudo apt install curl${NC}"
fi

echo -e "${GREEN} ↓ Downloading golang${NC}"

echo ""

pkg install golang -y && echo 'PATH="$PATH:$HOME/go/bin"' >> ~/.bashrc && source ~/.bashrc

mkdir -p "$HOME/go/bin"

echo ""

echo -e "${GREEN}   ✔️ Golang installed successfully${NC}"

ARCH=$(uname -m)
echo -e "${CYAN}  🔍 Detected architecture : ${YELLOW}$ARCH${NC}"

rm -f "$HOME/go/bin/parascan-go"

URL32="https://raw.githubusercontent.com/chamanola/PARAscan-Go/main/android%2032%20bit/parascan-go"
URL64="https://raw.githubusercontent.com/chamanola/PARAscan-Go/main/android%2064bit/parascan-go"

case "$ARCH" in
    armv7l|armv6l|armv8l|armv7|armv6|arm|armeabi|armeabi-v7a|i686|x86|x86_32)
        echo -e "${GREEN}  📥 Downloading 32-bit version...${NC}"
        DOWNLOAD_URL=$URL32
        ;;
    aarch64|arm64|armv8b|armv8a|x86_64|amd64)
        echo -e "${YELLOW}  ⚠️  Due to build issues, the 64-bit version is temporarily delayed.${NC}"
        echo -e "${YELLOW}  Please be patient — it will be available by tomorrow.${NC}"
        exit 1
        ;;
    *)
        if [[ "$ARCH" == arm* ]]; then
            echo -e "${GREEN}  📥 Downloading 32-bit version...${NC}"
            DOWNLOAD_URL=$URL32
        elif [[ "$ARCH" == aarch64* || "$ARCH" == arm64* ]]; then
            echo -e "${YELLOW}  ⚠️  Due to build issues, the 64-bit version is temporarily delayed.${NC}"
            echo -e "${YELLOW}  Please be patient — it will be available by tomorrow.${NC}"
            exit 1
        else
            error_exit "Unsupported architecture: $ARCH"
        fi
        ;;
esac

HOME_DIR="${HOME:-~}"

echo -e "${CYAN}  ⚡ Downloading PARAscan-Go...${NC}"
echo ""
if ! curl -L "$DOWNLOAD_URL" -o "$HOME_DIR/go/bin/parascan-go"; then
    error_exit "Download failed! Check your internet connection"
fi

chmod +x "$HOME_DIR/go/bin/parascan-go" || error_exit "Failed to make parascan-go executable"

ADDED_PATH=0
if [[ -f "$HOME_DIR/.bashrc" ]] && ! grep -q 'export PATH=$PATH:$HOME/go/bin' "$HOME_DIR/.bashrc"; then
    echo 'export PATH=$PATH:$HOME/go/bin' >> "$HOME_DIR/.bashrc"
    echo -e "${GREEN}  ✓ Added to PATH in ~/.bashrc${NC}"
    ADDED_PATH=1
fi
if [[ -f "$HOME_DIR/.zshrc" ]] && ! grep -q 'export PATH=$PATH:$HOME/go/bin' "$HOME_DIR/.zshrc"; then
    echo 'export PATH=$PATH:$HOME/go/bin' >> "$HOME_DIR/.zshrc"
    echo -e "${GREEN}  ✓ Added to PATH in ~/.zshrc${NC}"
    ADDED_PATH=1
fi

if [ $ADDED_PATH -eq 1 ]; then
    if [ -n "$BASH" ]; then
        source "$HOME_DIR/.bashrc" 2>/dev/null || true
    elif [ -n "$ZSH_NAME" ]; then
        source "$HOME_DIR/.zshrc" 2>/dev/null || true
    fi
fi

export PATH="$PATH:$HOME_DIR/go/bin"

echo -e "${GREEN}"
echo "         ╔══════════════════════════════════════════╗"
echo "                    INSTALLATION COMPLETE!         "
echo "         ╚══════════════════════════════════════════╝"
echo -e "${NC}"

if [[ -f "$HOME_DIR/.bashrc" ]] && ! grep -q 'alias para=' "$HOME_DIR/.bashrc"; then
    echo 'alias para="parascan-go"' >> "$HOME_DIR/.bashrc"
    echo -e "${GREEN}✓ Alias 'para' added in ~/.bashrc${NC}"
fi

if [[ -f "$HOME_DIR/.zshrc" ]] && ! grep -q 'alias para=' "$HOME_DIR/.zshrc"; then
    echo 'alias para="parascan-go"' >> "$HOME_DIR/.zshrc"
    echo -e "${GREEN}✓ Alias 'para' added in ~/.zshrc${NC}"
fi
echo ""

echo -e "${CYAN}  ♥️ Thank you for installing !${NC}"
echo ""
echo -e "${MAGENTA}  🚀 LAUNCHING PARAscan-Go...${NC}"
echo ""

sleep 3

exit 0